// Code generated by protoc-gen-go. DO NOT EDIT.
// source: builder.proto

/*
Package grpc is a generated protocol buffer package.

It is generated from these files:
	builder.proto

It has these top-level messages:
	BuildLatexRequest
	FileReply
	File
	HealthReply
	HealthRequest
	MergeRequest
*/
package grpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc1 "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type BuildLatexRequest struct {
	Files []*File `protobuf:"bytes,1,rep,name=files" json:"files,omitempty"`
}

func (m *BuildLatexRequest) Reset()                    { *m = BuildLatexRequest{} }
func (m *BuildLatexRequest) String() string            { return proto.CompactTextString(m) }
func (*BuildLatexRequest) ProtoMessage()               {}
func (*BuildLatexRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *BuildLatexRequest) GetFiles() []*File {
	if m != nil {
		return m.Files
	}
	return nil
}

type FileReply struct {
	Data    []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Success bool   `protobuf:"varint,3,opt,name=success" json:"success,omitempty"`
	Note    string `protobuf:"bytes,4,opt,name=note" json:"note,omitempty"`
}

func (m *FileReply) Reset()                    { *m = FileReply{} }
func (m *FileReply) String() string            { return proto.CompactTextString(m) }
func (*FileReply) ProtoMessage()               {}
func (*FileReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *FileReply) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *FileReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *FileReply) GetNote() string {
	if m != nil {
		return m.Note
	}
	return ""
}

type File struct {
	Name   string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Data   []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Folder string `protobuf:"bytes,3,opt,name=folder" json:"folder,omitempty"`
}

func (m *File) Reset()                    { *m = File{} }
func (m *File) String() string            { return proto.CompactTextString(m) }
func (*File) ProtoMessage()               {}
func (*File) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *File) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *File) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *File) GetFolder() string {
	if m != nil {
		return m.Folder
	}
	return ""
}

type HealthReply struct {
	Healthy bool `protobuf:"varint,1,opt,name=healthy" json:"healthy,omitempty"`
}

func (m *HealthReply) Reset()                    { *m = HealthReply{} }
func (m *HealthReply) String() string            { return proto.CompactTextString(m) }
func (*HealthReply) ProtoMessage()               {}
func (*HealthReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *HealthReply) GetHealthy() bool {
	if m != nil {
		return m.Healthy
	}
	return false
}

type HealthRequest struct {
}

func (m *HealthRequest) Reset()                    { *m = HealthRequest{} }
func (m *HealthRequest) String() string            { return proto.CompactTextString(m) }
func (*HealthRequest) ProtoMessage()               {}
func (*HealthRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type MergeRequest struct {
	Files []*File `protobuf:"bytes,1,rep,name=files" json:"files,omitempty"`
}

func (m *MergeRequest) Reset()                    { *m = MergeRequest{} }
func (m *MergeRequest) String() string            { return proto.CompactTextString(m) }
func (*MergeRequest) ProtoMessage()               {}
func (*MergeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *MergeRequest) GetFiles() []*File {
	if m != nil {
		return m.Files
	}
	return nil
}

func init() {
	proto.RegisterType((*BuildLatexRequest)(nil), "builder.BuildLatexRequest")
	proto.RegisterType((*FileReply)(nil), "builder.FileReply")
	proto.RegisterType((*File)(nil), "builder.File")
	proto.RegisterType((*HealthReply)(nil), "builder.HealthReply")
	proto.RegisterType((*HealthRequest)(nil), "builder.HealthRequest")
	proto.RegisterType((*MergeRequest)(nil), "builder.MergeRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc1.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc1.SupportPackageIsVersion4

// Client API for Builder service

type BuilderClient interface {
	// BuildLatex Takes latex files and returns a reply
	BuildLatex(ctx context.Context, in *BuildLatexRequest, opts ...grpc1.CallOption) (*FileReply, error)
	Merge(ctx context.Context, in *MergeRequest, opts ...grpc1.CallOption) (*FileReply, error)
	Health(ctx context.Context, in *HealthRequest, opts ...grpc1.CallOption) (*HealthReply, error)
}

type builderClient struct {
	cc *grpc1.ClientConn
}

func NewBuilderClient(cc *grpc1.ClientConn) BuilderClient {
	return &builderClient{cc}
}

func (c *builderClient) BuildLatex(ctx context.Context, in *BuildLatexRequest, opts ...grpc1.CallOption) (*FileReply, error) {
	out := new(FileReply)
	err := grpc1.Invoke(ctx, "/builder.Builder/BuildLatex", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *builderClient) Merge(ctx context.Context, in *MergeRequest, opts ...grpc1.CallOption) (*FileReply, error) {
	out := new(FileReply)
	err := grpc1.Invoke(ctx, "/builder.Builder/Merge", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *builderClient) Health(ctx context.Context, in *HealthRequest, opts ...grpc1.CallOption) (*HealthReply, error) {
	out := new(HealthReply)
	err := grpc1.Invoke(ctx, "/builder.Builder/Health", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Builder service

type BuilderServer interface {
	// BuildLatex Takes latex files and returns a reply
	BuildLatex(context.Context, *BuildLatexRequest) (*FileReply, error)
	Merge(context.Context, *MergeRequest) (*FileReply, error)
	Health(context.Context, *HealthRequest) (*HealthReply, error)
}

func RegisterBuilderServer(s *grpc1.Server, srv BuilderServer) {
	s.RegisterService(&_Builder_serviceDesc, srv)
}

func _Builder_BuildLatex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuildLatexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuilderServer).BuildLatex(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/builder.Builder/BuildLatex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuilderServer).BuildLatex(ctx, req.(*BuildLatexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Builder_Merge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(MergeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuilderServer).Merge(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/builder.Builder/Merge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuilderServer).Merge(ctx, req.(*MergeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Builder_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuilderServer).Health(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/builder.Builder/Health",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuilderServer).Health(ctx, req.(*HealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Builder_serviceDesc = grpc1.ServiceDesc{
	ServiceName: "builder.Builder",
	HandlerType: (*BuilderServer)(nil),
	Methods: []grpc1.MethodDesc{
		{
			MethodName: "BuildLatex",
			Handler:    _Builder_BuildLatex_Handler,
		},
		{
			MethodName: "Merge",
			Handler:    _Builder_Merge_Handler,
		},
		{
			MethodName: "Health",
			Handler:    _Builder_Health_Handler,
		},
	},
	Streams:  []grpc1.StreamDesc{},
	Metadata: "builder.proto",
}

func init() { proto.RegisterFile("builder.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 290 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0xb1, 0x6e, 0xfa, 0x30,
	0x10, 0xc6, 0xff, 0xfe, 0x03, 0x09, 0x39, 0x88, 0xaa, 0x9e, 0x5a, 0x64, 0x65, 0x8a, 0xdc, 0xa1,
	0x99, 0x18, 0xa0, 0x03, 0x53, 0x07, 0x06, 0xd4, 0xa1, 0x2c, 0x7e, 0x03, 0x03, 0x47, 0x89, 0x14,
	0x1a, 0x9a, 0x38, 0x52, 0x79, 0xb4, 0xbe, 0x5d, 0xe5, 0x0b, 0x49, 0x41, 0xa8, 0x43, 0xb7, 0xfb,
	0xfc, 0xdd, 0xfd, 0xf4, 0xdd, 0xc9, 0x10, 0xae, 0xaa, 0x34, 0xdb, 0x50, 0x31, 0x3e, 0x14, 0xb9,
	0xcd, 0xd1, 0x3f, 0x49, 0x35, 0x83, 0xdb, 0xb9, 0x2b, 0x5f, 0x8d, 0xa5, 0x4f, 0x4d, 0x1f, 0x15,
	0x95, 0x16, 0x1f, 0xa0, 0xb7, 0x4d, 0x33, 0x2a, 0xa5, 0x88, 0x3b, 0xc9, 0x60, 0x12, 0x8e, 0x9b,
	0xe1, 0x45, 0x9a, 0x91, 0xae, 0x3d, 0xb5, 0x84, 0x80, 0x25, 0x1d, 0xb2, 0x23, 0x22, 0x74, 0x37,
	0xc6, 0x1a, 0x29, 0x62, 0x91, 0x0c, 0x35, 0xd7, 0x28, 0xc1, 0x2f, 0xab, 0xf5, 0x9a, 0xca, 0x52,
	0x76, 0x62, 0x91, 0xf4, 0x75, 0x23, 0x5d, 0xf7, 0x7b, 0x6e, 0x49, 0x76, 0x63, 0x91, 0x04, 0x9a,
	0x6b, 0xb5, 0x80, 0xae, 0xc3, 0xb1, 0x67, 0xf6, 0xc4, 0x24, 0xe7, 0x99, 0x3d, 0xb5, 0xf4, 0xff,
	0x67, 0xf4, 0x11, 0x78, 0xdb, 0xdc, 0x85, 0x62, 0x78, 0xa0, 0x4f, 0x4a, 0x3d, 0xc2, 0xe0, 0x85,
	0x4c, 0x66, 0x77, 0x75, 0x30, 0x09, 0xfe, 0x8e, 0xe5, 0x91, 0x89, 0x7d, 0xdd, 0x48, 0x75, 0x03,
	0x61, 0xd3, 0xc8, 0x5b, 0xab, 0x29, 0x0c, 0x97, 0x54, 0xbc, 0xd1, 0x5f, 0xae, 0x30, 0xf9, 0x12,
	0xe0, 0xcf, 0xeb, 0x77, 0x7c, 0x06, 0xf8, 0xb9, 0x25, 0x46, 0x6d, 0xff, 0xd5, 0x81, 0x23, 0xbc,
	0x64, 0xb9, 0xa4, 0xea, 0x1f, 0x3e, 0x41, 0x8f, 0x03, 0xe0, 0x7d, 0x6b, 0x9f, 0x07, 0xfa, 0x65,
	0x6a, 0x06, 0x5e, 0xbd, 0x07, 0x8e, 0x5a, 0xff, 0x62, 0xb1, 0xe8, 0xee, 0xea, 0x9d, 0x27, 0x57,
	0x1e, 0xff, 0x85, 0xe9, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x50, 0x2a, 0x31, 0x2d, 0x1c, 0x02,
	0x00, 0x00,
}
