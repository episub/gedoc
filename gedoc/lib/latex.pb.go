// Code generated by protoc-gen-go. DO NOT EDIT.
// source: latex.proto

/*
Package grpc is a generated protocol buffer package.

It is generated from these files:
	latex.proto

It has these top-level messages:
	BuildLatexRequest
	BuildReply
	File
	HealthReply
	HealthRequest
*/
package grpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc1 "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type BuildLatexRequest struct {
	Files []*File `protobuf:"bytes,1,rep,name=files" json:"files,omitempty"`
}

func (m *BuildLatexRequest) Reset()                    { *m = BuildLatexRequest{} }
func (m *BuildLatexRequest) String() string            { return proto.CompactTextString(m) }
func (*BuildLatexRequest) ProtoMessage()               {}
func (*BuildLatexRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *BuildLatexRequest) GetFiles() []*File {
	if m != nil {
		return m.Files
	}
	return nil
}

type BuildReply struct {
	Data     []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	FileType string `protobuf:"bytes,2,opt,name=fileType" json:"fileType,omitempty"`
	Success  bool   `protobuf:"varint,3,opt,name=success" json:"success,omitempty"`
	Note     string `protobuf:"bytes,4,opt,name=note" json:"note,omitempty"`
}

func (m *BuildReply) Reset()                    { *m = BuildReply{} }
func (m *BuildReply) String() string            { return proto.CompactTextString(m) }
func (*BuildReply) ProtoMessage()               {}
func (*BuildReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *BuildReply) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *BuildReply) GetFileType() string {
	if m != nil {
		return m.FileType
	}
	return ""
}

func (m *BuildReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *BuildReply) GetNote() string {
	if m != nil {
		return m.Note
	}
	return ""
}

type File struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *File) Reset()                    { *m = File{} }
func (m *File) String() string            { return proto.CompactTextString(m) }
func (*File) ProtoMessage()               {}
func (*File) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *File) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *File) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type HealthReply struct {
	Healthy bool `protobuf:"varint,1,opt,name=healthy" json:"healthy,omitempty"`
}

func (m *HealthReply) Reset()                    { *m = HealthReply{} }
func (m *HealthReply) String() string            { return proto.CompactTextString(m) }
func (*HealthReply) ProtoMessage()               {}
func (*HealthReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *HealthReply) GetHealthy() bool {
	if m != nil {
		return m.Healthy
	}
	return false
}

type HealthRequest struct {
}

func (m *HealthRequest) Reset()                    { *m = HealthRequest{} }
func (m *HealthRequest) String() string            { return proto.CompactTextString(m) }
func (*HealthRequest) ProtoMessage()               {}
func (*HealthRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func init() {
	proto.RegisterType((*BuildLatexRequest)(nil), "latex.BuildLatexRequest")
	proto.RegisterType((*BuildReply)(nil), "latex.BuildReply")
	proto.RegisterType((*File)(nil), "latex.File")
	proto.RegisterType((*HealthReply)(nil), "latex.HealthReply")
	proto.RegisterType((*HealthRequest)(nil), "latex.HealthRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc1.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc1.SupportPackageIsVersion4

// Client API for Builder service

type BuilderClient interface {
	// BuildLatex Takes latex files and returns a reply
	BuildLatex(ctx context.Context, in *BuildLatexRequest, opts ...grpc1.CallOption) (*BuildReply, error)
	Health(ctx context.Context, in *HealthRequest, opts ...grpc1.CallOption) (*HealthReply, error)
}

type builderClient struct {
	cc *grpc1.ClientConn
}

func NewBuilderClient(cc *grpc1.ClientConn) BuilderClient {
	return &builderClient{cc}
}

func (c *builderClient) BuildLatex(ctx context.Context, in *BuildLatexRequest, opts ...grpc1.CallOption) (*BuildReply, error) {
	out := new(BuildReply)
	err := grpc1.Invoke(ctx, "/latex.Builder/BuildLatex", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *builderClient) Health(ctx context.Context, in *HealthRequest, opts ...grpc1.CallOption) (*HealthReply, error) {
	out := new(HealthReply)
	err := grpc1.Invoke(ctx, "/latex.Builder/Health", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Builder service

type BuilderServer interface {
	// BuildLatex Takes latex files and returns a reply
	BuildLatex(context.Context, *BuildLatexRequest) (*BuildReply, error)
	Health(context.Context, *HealthRequest) (*HealthReply, error)
}

func RegisterBuilderServer(s *grpc1.Server, srv BuilderServer) {
	s.RegisterService(&_Builder_serviceDesc, srv)
}

func _Builder_BuildLatex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuildLatexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuilderServer).BuildLatex(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/latex.Builder/BuildLatex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuilderServer).BuildLatex(ctx, req.(*BuildLatexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Builder_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuilderServer).Health(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/latex.Builder/Health",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuilderServer).Health(ctx, req.(*HealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Builder_serviceDesc = grpc1.ServiceDesc{
	ServiceName: "latex.Builder",
	HandlerType: (*BuilderServer)(nil),
	Methods: []grpc1.MethodDesc{
		{
			MethodName: "BuildLatex",
			Handler:    _Builder_BuildLatex_Handler,
		},
		{
			MethodName: "Health",
			Handler:    _Builder_Health_Handler,
		},
	},
	Streams:  []grpc1.StreamDesc{},
	Metadata: "latex.proto",
}

func init() { proto.RegisterFile("latex.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 263 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x91, 0x3f, 0x4f, 0xc3, 0x30,
	0x10, 0xc5, 0x71, 0x9b, 0x36, 0xe1, 0x02, 0x42, 0x3d, 0x31, 0x58, 0x99, 0x82, 0x17, 0x32, 0x65,
	0x28, 0x88, 0x85, 0x8d, 0x01, 0x31, 0x30, 0x59, 0x7c, 0x01, 0xd3, 0x1e, 0x6a, 0x90, 0x4b, 0x42,
	0xed, 0x48, 0x44, 0xe2, 0xc3, 0x23, 0x5f, 0xfe, 0xf0, 0x6f, 0xbb, 0x97, 0x77, 0xef, 0x7e, 0xb9,
	0x33, 0xa4, 0xd6, 0x78, 0xfa, 0x28, 0x9b, 0x43, 0xed, 0x6b, 0x5c, 0xb0, 0x50, 0x37, 0xb0, 0xba,
	0x6b, 0x2b, 0xbb, 0x7d, 0x0c, 0x4a, 0xd3, 0x7b, 0x4b, 0xce, 0xe3, 0x05, 0x2c, 0x5e, 0x2a, 0x4b,
	0x4e, 0x8a, 0x7c, 0x5e, 0xa4, 0xeb, 0xb4, 0xec, 0x83, 0xf7, 0x95, 0x25, 0xdd, 0x3b, 0xea, 0x15,
	0x80, 0x73, 0x9a, 0x1a, 0xdb, 0x21, 0x42, 0xb4, 0x35, 0xde, 0x48, 0x91, 0x8b, 0xe2, 0x44, 0x73,
	0x8d, 0x19, 0x24, 0xa1, 0xf5, 0xa9, 0x6b, 0x48, 0xce, 0x72, 0x51, 0x1c, 0xeb, 0x49, 0xa3, 0x84,
	0xd8, 0xb5, 0x9b, 0x0d, 0x39, 0x27, 0xe7, 0xb9, 0x28, 0x12, 0x3d, 0xca, 0x30, 0xe9, 0xad, 0xf6,
	0x24, 0x23, 0x4e, 0x70, 0xad, 0x4a, 0x88, 0x02, 0x9a, 0x3d, 0xb3, 0x27, 0xa6, 0x04, 0xcf, 0xec,
	0x69, 0x22, 0xcf, 0xbe, 0xc9, 0xea, 0x12, 0xd2, 0x07, 0x32, 0xd6, 0xef, 0xfa, 0x9f, 0x93, 0x10,
	0xef, 0x58, 0x76, 0x9c, 0x4c, 0xf4, 0x28, 0xd5, 0x19, 0x9c, 0x8e, 0x8d, 0xbc, 0xf8, 0xfa, 0x13,
	0x62, 0xde, 0x8a, 0x0e, 0x78, 0x3b, 0x2c, 0xc8, 0x87, 0x41, 0x39, 0x9c, 0xe0, 0xdf, 0xad, 0xb2,
	0xd5, 0x4f, 0x87, 0x81, 0xea, 0x08, 0xaf, 0x61, 0xd9, 0x0f, 0xc6, 0xf3, 0xc1, 0xfe, 0xc5, 0xc9,
	0xf0, 0xcf, 0x57, 0x4e, 0x3d, 0x2f, 0xf9, 0x65, 0xae, 0xbe, 0x02, 0x00, 0x00, 0xff, 0xff, 0xc1,
	0xa1, 0x32, 0xe4, 0xa8, 0x01, 0x00, 0x00,
}
